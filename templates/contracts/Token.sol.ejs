<%
  const parentsList = [];
  const importStatements = [];

  parseInputs(input);
%>

<%- include("partials/version.ejs") %>

<% writeImportStatements() %>

contract Token is <%- parentsList.join(", ") %> { <%
    if (input.token.token_type.is_minime) {
      writeMiniMeTokenBody();
    } else {
      writeZeppelinTokenBody();
    }
  %>
}


<%
  function parseInputs(input) {
    if (input.token.token_type.is_minime) {
      parentsList.push("MiniMeToken");
      importStatements.push(`import "./base/minime/MiniMeToken.sol";`);
    } else {
      parentsList.push("Mintable");
      importStatements.push(`import "./base/zeppelin/token/Mintable.sol";`);

      if (input.token.token_option && input.token.token_option.burnable) {
        parentsList.push("BurnableToken");
        importStatements.push(`import "./base/zeppelin/token/BurnableToken.sol";`);
      }

      if (input.token.token_option && input.token.token_option.pausable) {
        parentsList.push("Pausable");
        importStatements.push(`import "./base/zeppelin/lifecycle/Pausable.sol";`);
      }
    }
  }
%>


<%
  function writeImportStatements() { %>
<%- importStatements.join("\n") %>
  <% }
%>


<%
  function writeZeppelinTokenBody() { %>
  string public name = "<%= input.token.token_name %>";
  string public symbol = "<%= input.token.token_symbol %>";
  uint8 public decimals = <%= input.token.decimals %>; <%
  }
%>


<%
  function writeMiniMeTokenBody() { %>
    function Token(address _tokenFactory)
      MiniMeToken(
        _tokenFactory,
        0x0,                     // no parent token
        0,                       // no snapshot block number from parent
        "<%= input.token.token_name %>",  // Token name
        <%= input.token.decimals %>,                      // Decimals
        "<%= input.token.token_symbol %>",                   // Symbol
        true                     // Enable transfers
      ) {} <% }
%>
