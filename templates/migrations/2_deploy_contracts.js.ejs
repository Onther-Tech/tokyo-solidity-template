const moment = require("moment");
const get = require("lodash/get");

const BigNumber = web3.BigNumber;

/**
 * Contract Artifacts
 */
const Token = artifacts.require("./Token.sol");
const KYC = artifacts.require("./KYC.sol");
const Crowdsale = artifacts.require("./Crowdsale.sol");
const Vault = artifacts.require("./MultiHolderVault.sol");
const Locker = artifacts.require("./Locker.sol");

module.exports = async function (deployer, network, accounts) {
  const address = {};
  const input = getInput();

  const data = { address, input };

  // contract instance
  let kyc, vault, locker, token, crowdsale;

  /**
   * Deploy contracts sequentually
   *  1. KYC / Vault / Locker
   *  2. Token
   *  3. Crowdsale
   *  4. Initialize contracts
   *   - transfer ownerships of vault, token, lcoker to crowdsale
   *   - Crowdsale.init()
   */

  deployer.deploy([
    KYC,
    Vault,
    [
      Locker,
      <%- helper.writeLockerArguments(input, 3) %>
    ]
  ]).then(async () => {
    kyc = await KYC.deployed();
    vault = await Vault.deployed();
    locker = await Locker.deployed();

    address.kyc = kyc.address;
    address.vault = vault.address;
    address.locker = locker.address;
  }).then(() => deployer.deploy([
    Token
  ])).then(async () => {
    token = await Token.deployed();

    address.token = token.address;
  }).then(() => deployer.deploy([[
    Crowdsale,
    // constructor arguments...
    [
      <%- helper.writeConstructorArguments(parseResult) %>
    ],
  ]])).then(async () => {
    crowdsale = await Crowdsale.deployed();
  }).then(async () => {
    // transfer ownerships to crowdsale
    await Promise.all(
      vault.transferOwnership(crowdsale.address),
      locker.transferOwnership(crowdsale.address),
      <%- writeTransferTokenOwnership() -%>,
    )

    await crowdsale.init();
  })
};

function getInput() {
  return JSON.parse("<%- helper.serialize(input) -%>");
}

<%
  function writeTransferTokenOwnership() {
    if (input.token.token_type.is_minime) return 'token.changeController(crowdsale.address)';
    return 'token.transferOwnership(crowdsale.address)';
  }
%>
